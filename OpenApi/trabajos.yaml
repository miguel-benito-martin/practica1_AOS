openapi: "3.0.3"
info:
  title: "Subsistema 3: gestión de trabajos de un taller"
  version: "1.0.0"
  description: "Asignatura AOS: grupo 1"
  license:
    name: AOSGrupo1
    url: 'https://github.com/miguel-benito-martin/practica1_AOS'
  contact:
    name: Arquitecturas Orientadas a Servicios
    url: 'https://moodle.upm.es/titulaciones/oficiales/mod/assign/view.php?id=1320916'
    email: alberto.romartin@alumnos.upm.es
#servers:
#  - url: '{schema}://{server}:{port}/{basePath}'
#    description: Servidor local
#    variables:
#      schema:
#        description: Esquema
#        default: http
#       enum:
#         - http
#         - https
#     server:
#       description: Nombre del servidor
#       default: 127.0.0.1
#     port:
#       description: Número de puerto
#       default: '8080'
#     basePath:
#       description: Ruta base
#       default: api/v1
tags:
  - name: 'Trabajos'
    description: Trabajos de los usuarios
paths:
  /trabajo:
    get:
      tags:
        - 'Trabajo'
      summary: Obtiene todos los trabajos de mantenimiento que se realizan sobre un vehículo
      operationId: upm_aos_trabajo_cget
      responses:
        200:
          description: Array de trabajos
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: object
                properties:
                  trabajos:
                    description: array de trabajos
                    type: array
                    items:
                      $ref: '#/components/schemas/Trabajo'
 #             examples:
 #               trabajosExamples:
 #                 $ref: '#/components/examples/trabajos'
        404:
          $ref: '#/components/responses/Response_404'
    post:
      tags:
        - 'Trabajo'
      summary: Crea un nuevo trabajo
      description: Genera un nuevo trabajo de mantenimiento para un determinado vehículo
      operationId: upm_aos_trabajo_post
      requestBody:
       $ref: '#/components/requestBodies/trabajoRB'
      responses:
        201:
          description: Trabajo creado
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trabajo'
        422:
          $ref: '#/components/responses/Response_422'
    options:
      tags:
        - 'Trabajo'
      summary: Proporciona la lista de los métodos HTTP soportados.
      description: Devuelve una cabecera `Allow` con la lista de métodos HTTP soportados (separados por comas).
      operationId: upm_aos_trabajo_coptions
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta está vacío&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'

  /trabajo/{trabajoId}:
    parameters:
      - $ref: '#/components/parameters/trabajoId'
    get:
      tags:
        - 'Trabajos'
      summary: Buscar un trabajo por su ID
      description: Devuelve el trabajo especificado por `trabajoId`
      operationId: grupo_1_AOS_getId
      responses:
        '200':
          description: Comanda
          headers:
            ETag:
              $ref: '#/components/headers/ETag'  #lo hacen ruth y paz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trabajo'
        '404':
          $ref: '#/components/responses/Response_404'


components:
  schemas:
    Trabajo:
      $ref: './schemas/trabajo.yaml#/Trabajo'
    HTTP_Problem:
      $ref: './schemas/HTTP_Problem.yaml#/HTTP_Problem'

  headers:
    ETag:
      description: Entity Tag (identificador único proporcionado para validación de caché)
      schema:
        type: string
        pattern: "[0-9a-f]*"
        # https://github.com/marak/Faker.js#api-methods
        x-faker: random.uuid
        example:
          32b64ff851405fdd
    Location:
      description: '`URI` del nuevo recurso'
      schema:
        type: string
        format: url
        x-faker: internet.url
    Allow:
      description: Lista de métodos HTTP soportados
      schema:
        type: string
      example:
        GET,DELETE,PUT,OPTIONS
  parameters:
    trabajoId:
      name: trabajoId
      in: path
      description: ID del trabajo
      required: true
      schema:
        type: integer
        pattern: ^\d+$
  requestBodies:
    trabajoRB:
      description: '`Trabajo` data'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - nombre
              - descripcion
              - estadoTrabajo
            properties:
              nombre:
                description: Nombre del tipo de trabajo
                type: string
              descripcion:
                description: Descripción del trabajo
                type: string
              estadoTrabajo:
                description: Posibles estados del trabajo [Creado, Planificado, Iniciado, Terminado]
                type: string
                enum: [ Creado, Planificado, Iniciado, Terminado ]
            example:
              nombre: Reparación de frenos
              descripcion: Reparación del freno derecho
              estadoTrabajo: Creado

  responses:
    Response_404:
      description: '`NOT FOUND`: recurso no disponible'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-404'
    # podemos meter 414 Request-URI Too Long
  examples:
    trabajos:

    response-http-404:
      value:
        type: https://httpstatuses.com/404
        title: NOT FOUND
        status: 404
        detail: El recurso solicitado no está disponible...
        instance: about:blank


